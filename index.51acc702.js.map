{"mappings":"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","sources":["<anon>","src/js/index.js"],"sourcesContent":["// # 1. Подключаем API\nconst apiKey = \"1\";\n// Получение коктейлей по первой букве\nfunction fetchCocktailsByLetter(letter) {\n    // URL для получения коктейлей, начинающихся с указанной буквы\n    const url = `https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${letter}`;\n    // Получение данных из API\n    fetch(url).then((response)=>{\n        // Проверяем, корректен ли ответ\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n    }).then((data)=>{\n        // Отображение полученных коктейлей\n        displayCocktails(data.drinks);\n    }).catch((error)=>{\n        // Обработка ошибок при получении данных\n        console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043E\\u043A\\u0442\\u0435\\u0439\\u043B\\u0435\\u0439:\", error);\n        alert(`\\u{41E}\\u{448}\\u{438}\\u{431}\\u{43A}\\u{430} \\u{43F}\\u{440}\\u{438} \\u{43F}\\u{43E}\\u{43B}\\u{443}\\u{447}\\u{435}\\u{43D}\\u{438}\\u{438} \\u{434}\\u{430}\\u{43D}\\u{43D}\\u{44B}\\u{445}: ${error}`);\n    });\n}\n// # 2. Функция отображения полученных коктейлей\nfunction displayCocktails(cocktails) {\n    const cocktailList = document.querySelector(\".cocktail-list\");\n    cocktailList.innerHTML = \"\"; // Очистка списка перед добавлением новых элементов\n    // Проверяем, есть ли коктейли для отображения\n    if (cocktails) // Проходим по каждому коктейлю и создаем для него карточку\n    cocktails.forEach((cocktail)=>{\n        const cocktailCard = document.createElement(\"div\");\n        const currentTheme = body.classList.contains(\"light__theme\") ? \"light__theme\" : \"dark__theme\";\n        if (currentTheme === \"dark__theme\") {\n            cocktailCard.classList.add(\"cocktail-card\");\n            cocktailCard.classList.toggle(\"dark__theme\");\n            cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"add-to-favorites\">Add to Favorites</button>\n      `;\n            // Добавляем карточку в список\n            cocktailList.appendChild(cocktailCard);\n        } else {\n            cocktailCard.classList.add(\"cocktail-card\");\n            // Добавляем детали коктейля в карточку\n            cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"add-to-favorites\">Add to Favorites</button>\n      `;\n            // Добавляем карточку в список\n            cocktailList.appendChild(cocktailCard);\n        }\n        // Добавляем обработчик события для кнопки \"Add to Favorites\"\n        cocktailCard.querySelector(\".add-to-favorites\").addEventListener(\"click\", function() {\n            addToFavorites(cocktail);\n        });\n    });\n    else // Отображение сообщения, если коктейли не найдены\n    cocktailList.innerHTML = '<p class=\"cocktails__notfound\">\\u041A\\u043E\\u043A\\u0442\\u0435\\u0439\\u043B\\u0438 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B.</p>';\n}\n// # 3. Обработчик событий для инпута и aлфавита\ndocument.querySelector(\".nav__input\").addEventListener(\"input\", function() {\n    const query = this.value;\n    const url = `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`;\n    // Получение данных на основе поискового запроса\n    fetch(url).then((response)=>{\n        // Проверяем, корректен ли ответ\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n    }).then((data)=>{\n        // Отображение полученных коктейлей\n        displayCocktails(data.drinks);\n    }).catch((error)=>{\n        // Обработка ошибок при получении данных\n        console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043E\\u043A\\u0442\\u0435\\u0439\\u043B\\u0435\\u0439:\", error);\n    });\n});\n// Добавление обработчиков событий для букв алфавита\ndocument.querySelectorAll(\".hero__abc-item\").forEach((item)=>{\n    item.addEventListener(\"click\", function() {\n        const letter = this.textContent;\n        fetchCocktailsByLetter(letter);\n    });\n});\n// # 4. Функция для добавления коктейля в избранное\nfunction addToFavorites(cocktail) {\n    let favorites = JSON.parse(sessionStorage.getItem(\"favorites\")) || [];\n    // Проверяем, не добавлен ли уже коктейль в избранное\n    const alreadyFavorite = favorites.some((favorite)=>favorite.idDrink === cocktail.idDrink);\n    if (!alreadyFavorite) {\n        // Добавляем коктейль в список избранных\n        favorites.push(cocktail);\n        sessionStorage.setItem(\"favorites\", JSON.stringify(favorites));\n        alert(`${cocktail.strDrink} \\u{434}\\u{43E}\\u{431}\\u{430}\\u{432}\\u{43B}\\u{435}\\u{43D} \\u{432} \\u{438}\\u{437}\\u{431}\\u{440}\\u{430}\\u{43D}\\u{43D}\\u{43E}\\u{435}`);\n    } else alert(`${cocktail.strDrink} \\u{443}\\u{436}\\u{435} \\u{432} \\u{438}\\u{437}\\u{431}\\u{440}\\u{430}\\u{43D}\\u{43D}\\u{43E}\\u{43C}`);\n    // Обновление отображения избранных коктейлей\n    displayFavorites();\n}\n// # 5. Функция для удаления коктейлей из избранного\nfunction removeFromFavorites(cocktailName) {\n    let favorites = JSON.parse(sessionStorage.getItem(\"favorites\")) || [];\n    // Фильтруем коктейль для удаления\n    favorites = favorites.filter((cocktail)=>cocktail.strDrink !== cocktailName);\n    sessionStorage.setItem(\"favorites\", JSON.stringify(favorites));\n    // Обновление отображения избранных коктейлей\n    displayFavorites();\n}\n// # 6. Функция для отображения избранных коктейлей\nfunction displayFavorites() {\n    const favoritesSection = document.querySelector(\".favorites-section\");\n    favoritesSection.style.display = \"block\"; // Убедимся, что секция видна\n    const favoritesList = document.querySelector(\".favorites-list\");\n    favoritesList.innerHTML = \"\"; // Очистка списка перед добавлением новых элементов\n    let favorites = JSON.parse(sessionStorage.getItem(\"favorites\")) || [];\n    // Проверяем, есть ли избранные коктейли для отображения\n    if (favorites.length > 0) // Проходим по каждому избранному коктейлю и создаем для него карточку\n    favorites.forEach((cocktail)=>{\n        const cocktailCard = document.createElement(\"div\");\n        cocktailCard.classList.add(\"cocktail-card\");\n        // Добавляем детали коктейля в карточку\n        cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"remove-from-favorites\">Remove from favorites</button>\n      `;\n        // Добавляем карточку в список\n        favoritesList.appendChild(cocktailCard);\n        // Добавляем обработчик события для кнопки \"Remove from Favorites\"\n        cocktailCard.querySelector(\".remove-from-favorites\").addEventListener(\"click\", function() {\n            removeFromFavorites(cocktail.strDrink);\n        });\n    });\n    else // Отображение сообщения, если нет избранных коктейлей\n    favoritesList.innerHTML = '<p class=\"cocktails__notfound\">\\u0418\\u0437\\u0431\\u0440\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043A\\u043E\\u043A\\u0442\\u0435\\u0439\\u043B\\u0435\\u0439 \\u043D\\u0435\\u0442.</p>';\n}\n// # 7. Отображение избранных при загрузке\ndocument.addEventListener(\"DOMContentLoaded\", displayFavorites);\n// # 8. Обработчик событий на allFav, убираем все лишнее\ndocument.getElementById(\"allFavoritesButton\").addEventListener(\"click\", function() {\n    displayFavorites();\n    document.querySelector(\".alphabet-section\").style.display = \"none\";\n    document.querySelector(\".cocktail-section\").style.display = \"none\";\n});\n// #9. Dark Theme\n// function changeTheme() {\n//   const changeList = document.querySelectorAll(\n//     '.toggle__theme, .nav__link, body, .hero__abc-item, .cocktails__notfound, .cocktail-card'\n//   );\n//   changeList.forEach(elem => {\n//     elem.classList.toggle('dark__theme');\n//   });\n// }\nconst toggleEl = document.querySelectorAll(\".toggle__theme, .nav__link, body, .hero__abc-item, .cocktails__notfound, .cocktail-card\");\nconst body = document.body;\nfunction changeTheme() {\n    const currentTheme = body.classList.contains(\"light__theme\") ? \"light__theme\" : \"dark__theme\";\n    const newTheme = currentTheme === \"light__theme\" ? \"dark__theme\" : \"light__theme\";\n    body.classList.remove(currentTheme);\n    body.classList.add(newTheme);\n    toggleEl.forEach((elem)=>elem.classList.remove(currentTheme));\n    toggleEl.forEach((elem)=>elem.classList.add(newTheme));\n    localStorage.setItem(\"theme\", newTheme);\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme) {\n        document.body.classList.add(savedTheme);\n        toggleEl.forEach((elem)=>elem.classList.add(savedTheme));\n    } else {\n        document.body.classList.add(\"light__theme\");\n        toggleEl.forEach((elem)=>elem.classList.add(\"light__theme\"));\n    }\n});\n\n//# sourceMappingURL=index.51acc702.js.map\n","// # 1. Подключаем API\nconst apiKey = '1';\n\n// Получение коктейлей по первой букве\nfunction fetchCocktailsByLetter(letter) {\n  // URL для получения коктейлей, начинающихся с указанной буквы\n  const url = `https://www.thecocktaildb.com/api/json/v1/1/search.php?f=${letter}`;\n\n  // Получение данных из API\n  fetch(url)\n    .then(response => {\n      // Проверяем, корректен ли ответ\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(data => {\n      // Отображение полученных коктейлей\n      displayCocktails(data.drinks);\n    })\n    .catch(error => {\n      // Обработка ошибок при получении данных\n      console.error('Ошибка при получении коктейлей:', error);\n      alert(`Ошибка при получении данных: ${error}`);\n    });\n}\n\n// # 2. Функция отображения полученных коктейлей\n\nfunction displayCocktails(cocktails) {\n  const cocktailList = document.querySelector('.cocktail-list');\n  cocktailList.innerHTML = ''; // Очистка списка перед добавлением новых элементов\n\n  // Проверяем, есть ли коктейли для отображения\n  if (cocktails) {\n    // Проходим по каждому коктейлю и создаем для него карточку\n    cocktails.forEach(cocktail => {\n      const cocktailCard = document.createElement('div');\n      const currentTheme = body.classList.contains('light__theme')\n        ? 'light__theme'\n        : 'dark__theme';\n      if (currentTheme === 'dark__theme') {\n        cocktailCard.classList.add('cocktail-card');\n        cocktailCard.classList.toggle('dark__theme');\n\n        cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"add-to-favorites\">Add to Favorites</button>\n      `;\n\n        // Добавляем карточку в список\n        cocktailList.appendChild(cocktailCard);\n      } else {\n        cocktailCard.classList.add('cocktail-card');\n\n        // Добавляем детали коктейля в карточку\n        cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"add-to-favorites\">Add to Favorites</button>\n      `;\n\n        // Добавляем карточку в список\n        cocktailList.appendChild(cocktailCard);\n      }\n\n      // Добавляем обработчик события для кнопки \"Add to Favorites\"\n      cocktailCard\n        .querySelector('.add-to-favorites')\n        .addEventListener('click', function () {\n          addToFavorites(cocktail);\n        });\n    });\n  } else {\n    // Отображение сообщения, если коктейли не найдены\n    cocktailList.innerHTML =\n      '<p class=\"cocktails__notfound\">Коктейли не найдены.</p>';\n  }\n}\n\n// # 3. Обработчик событий для инпута и aлфавита\n\ndocument.querySelector('.nav__input').addEventListener('input', function () {\n  const query = this.value;\n  const url = `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`;\n\n  // Получение данных на основе поискового запроса\n  fetch(url)\n    .then(response => {\n      // Проверяем, корректен ли ответ\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    })\n    .then(data => {\n      // Отображение полученных коктейлей\n      displayCocktails(data.drinks);\n    })\n    .catch(error => {\n      // Обработка ошибок при получении данных\n      console.error('Ошибка при получении коктейлей:', error);\n    });\n});\n\n// Добавление обработчиков событий для букв алфавита\ndocument.querySelectorAll('.hero__abc-item').forEach(item => {\n  item.addEventListener('click', function () {\n    const letter = this.textContent;\n    fetchCocktailsByLetter(letter);\n  });\n});\n\n// # 4. Функция для добавления коктейля в избранное\n\nfunction addToFavorites(cocktail) {\n  let favorites = JSON.parse(sessionStorage.getItem('favorites')) || [];\n\n  // Проверяем, не добавлен ли уже коктейль в избранное\n  const alreadyFavorite = favorites.some(\n    favorite => favorite.idDrink === cocktail.idDrink\n  );\n  if (!alreadyFavorite) {\n    // Добавляем коктейль в список избранных\n    favorites.push(cocktail);\n    sessionStorage.setItem('favorites', JSON.stringify(favorites));\n    alert(`${cocktail.strDrink} добавлен в избранное`);\n  } else {\n    alert(`${cocktail.strDrink} уже в избранном`);\n  }\n\n  // Обновление отображения избранных коктейлей\n  displayFavorites();\n}\n\n// # 5. Функция для удаления коктейлей из избранного\n\nfunction removeFromFavorites(cocktailName) {\n  let favorites = JSON.parse(sessionStorage.getItem('favorites')) || [];\n\n  // Фильтруем коктейль для удаления\n  favorites = favorites.filter(cocktail => cocktail.strDrink !== cocktailName);\n  sessionStorage.setItem('favorites', JSON.stringify(favorites));\n\n  // Обновление отображения избранных коктейлей\n  displayFavorites();\n}\n\n// # 6. Функция для отображения избранных коктейлей\n\nfunction displayFavorites() {\n  const favoritesSection = document.querySelector('.favorites-section');\n  favoritesSection.style.display = 'block'; // Убедимся, что секция видна\n  const favoritesList = document.querySelector('.favorites-list');\n  favoritesList.innerHTML = ''; // Очистка списка перед добавлением новых элементов\n\n  let favorites = JSON.parse(sessionStorage.getItem('favorites')) || [];\n\n  // Проверяем, есть ли избранные коктейли для отображения\n  if (favorites.length > 0) {\n    // Проходим по каждому избранному коктейлю и создаем для него карточку\n    favorites.forEach(cocktail => {\n      const cocktailCard = document.createElement('div');\n      cocktailCard.classList.add('cocktail-card');\n\n      // Добавляем детали коктейля в карточку\n      cocktailCard.innerHTML = `\n        <img class=\"img__cocktails\" src=\"${cocktail.strDrinkThumb}\" alt=\"${cocktail.strDrink}\">\n        <h3 class=\"cocktails__name\">${cocktail.strDrink}</h3>\n        <button class=\"remove-from-favorites\">Remove from favorites</button>\n      `;\n\n      // Добавляем карточку в список\n      favoritesList.appendChild(cocktailCard);\n\n      // Добавляем обработчик события для кнопки \"Remove from Favorites\"\n      cocktailCard\n        .querySelector('.remove-from-favorites')\n        .addEventListener('click', function () {\n          removeFromFavorites(cocktail.strDrink);\n        });\n    });\n  } else {\n    // Отображение сообщения, если нет избранных коктейлей\n    favoritesList.innerHTML =\n      '<p class=\"cocktails__notfound\">Избранных коктейлей нет.</p>';\n  }\n}\n\n// # 7. Отображение избранных при загрузке\ndocument.addEventListener('DOMContentLoaded', displayFavorites);\n\n// # 8. Обработчик событий на allFav, убираем все лишнее\n\ndocument\n  .getElementById('allFavoritesButton')\n  .addEventListener('click', function () {\n    displayFavorites();\n    document.querySelector('.alphabet-section').style.display = 'none';\n    document.querySelector('.cocktail-section').style.display = 'none';\n  });\n\n// #9. Dark Theme\n\n// function changeTheme() {\n//   const changeList = document.querySelectorAll(\n//     '.toggle__theme, .nav__link, body, .hero__abc-item, .cocktails__notfound, .cocktail-card'\n//   );\n\n//   changeList.forEach(elem => {\n//     elem.classList.toggle('dark__theme');\n//   });\n// }\nconst toggleEl = document.querySelectorAll(\n  '.toggle__theme, .nav__link, body, .hero__abc-item, .cocktails__notfound, .cocktail-card'\n);\n\nconst body = document.body;\nfunction changeTheme() {\n  const currentTheme = body.classList.contains('light__theme')\n    ? 'light__theme'\n    : 'dark__theme';\n  const newTheme =\n    currentTheme === 'light__theme' ? 'dark__theme' : 'light__theme';\n\n  body.classList.remove(currentTheme);\n  body.classList.add(newTheme);\n  toggleEl.forEach(elem => elem.classList.remove(currentTheme));\n  toggleEl.forEach(elem => elem.classList.add(newTheme));\n\n  localStorage.setItem('theme', newTheme);\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const savedTheme = localStorage.getItem('theme');\n  if (savedTheme) {\n    document.body.classList.add(savedTheme);\n    toggleEl.forEach(elem => elem.classList.add(savedTheme));\n  } else {\n    document.body.classList.add('light__theme');\n    toggleEl.forEach(elem => elem.classList.add('light__theme'));\n  }\n});\n"],"names":["displayCocktails","cocktails","cocktailList","document","querySelector","innerHTML","forEach","cocktail","cocktailCard","createElement","currentTheme","body","classList","contains","add","toggle","strDrinkThumb","strDrink","appendChild","addEventListener","favorites","JSON","parse","sessionStorage","getItem","some","favorite","idDrink","alert","push","setItem","stringify","displayFavorites","favoritesSection","style","display","favoritesList","length","cocktailName","filter","query","value","fetch","then","response","ok","Error","status","json","data","drinks","catch","error","console","querySelectorAll","item","fetchCocktailsByLetter","letter","textContent","getElementById","toggleEl","savedTheme","localStorage","elem"],"version":3,"file":"index.51acc702.js.map"}